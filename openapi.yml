openapi: 3.0.0
info:
  title: EnviroSense API
  version: 1.0.0
  description: API documentation for EnviroSense.

servers:
  - url: http://94.130.75.173:8101
    description: Deployed API Server

tags:
  - name: Building
    description: Endpoints related to buildings
  - name: Room
    description: Endpoints related to rooms
  - name: Device
    description: Endpoints related to devices
  - name: Device Data
    description: Endpoints related to device data

paths:
  /buildings:
    get:
      tags:
        - Building
      summary: Get all buildings
      operationId: getBuildings
      responses:
        '200':
          description: A list of buildings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBuildingsResponse'
    post:
      tags:
        - Building
      summary: Create a new building
      operationId: createBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBuildingRequest'
      responses:
        '201':
          description: Building created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}:
    get:
      tags:
        - Building
      summary: Get a building by document ID
      operationId: getBuildingById
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Building
      summary: Update an existing building
      operationId: updateBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBuildingRequest'
      responses:
        '200':
          description: Building updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Building
      summary: Delete a building
      operationId: deleteBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Building deleted successfully
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}/rooms:
    post:
      tags:
        - Building
      summary: Add rooms to a building
      operationId: addRoomsToBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoomsToBuildingRequest'
      responses:
        '200':
          description: Rooms added to building
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}/rooms/{roomDocumentId}:
    delete:
      tags:
        - Building
      summary: Remove a room from a building
      operationId: removeRoomFromBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Room removed from building
        '404':
          description: Building or room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms:
    get:
      tags:
        - Room
      summary: Get all rooms
      operationId: getRooms
      responses:
        '200':
          description: A list of rooms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoomsResponse'
    post:
      tags:
        - Room
      summary: Create a new room
      operationId: createRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '201':
          description: Room created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}:
    get:
      tags:
        - Room
      summary: Get a room by document ID
      operationId: getRoomById
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Room
      summary: Update an existing room
      operationId: updateRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomRequest'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Room
      summary: Delete a room
      operationId: deleteRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}/air-quality:
    get:
      tags:
        - Room
      summary: Get air quality data for a room
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Air quality data for the room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirQuality'

  /rooms/{roomDocumentId}/devices:
    post:
      tags:
        - Room
      summary: Add a device to a room
      operationId: addDeviceToRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDeviceToRoomRequest'
      responses:
        '200':
          description: Device added to room
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}/devices/{deviceDocumentId}:
    delete:
      tags:
        - Room
      summary: Remove a device from a room
      operationId: removeDeviceFromRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device removed from room
        '404':
          description: Room or device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices:
    get:
      tags:
        - Device
      summary: Get all devices
      operationId: getDevices
      responses:
        '200':
          description: A list of devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDevicesResponse'
    post:
      tags:
        - Device
      summary: Create a new device
      operationId: createDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '201':
          description: Device created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceDocumentId}:
    get:
      tags:
        - Device
      summary: Get a device by document ID
      operationId: getDeviceById
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Device
      summary: Update an existing device
      operationId: updateDevice
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequest'
      responses:
        '200':
          description: Device updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Device
      summary: Delete a device
      operationId: deleteDevice
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device deleted successfully
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceDocumentId}/device-data:
    post:
      tags:
        - Device
      summary: Add device data to a device
      operationId: addDeviceData
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDeviceDataRequest'
      responses:
        '200':
          description: Device data added successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /device-data:
    get:
      tags:
        - Device Data
      summary: Get all device data entries
      operationId: getDeviceData
      parameters:
        - name: identifier
          in: query
          required: false
          schema:
            type: string
          description: Device identifier to filter data
      responses:
        '200':
          description: A list of device data entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceDataResponse'

  /device-data/{deviceDataDocumentId}:
    get:
      tags:
        - Device Data
      summary: Get device data by document ID
      operationId: getDeviceDataById
      parameters:
        - name: deviceDataDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single device data entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceData'
        '404':
          description: Device data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Building:
      type: object
      properties:
        id:
          type: integer
        documentId:
          type: string
        name:
          type: string
        address:
          type: string
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
      required:
        - id
        - documentId
        - name
        - address

    Room:
      type: object
      properties:
        id:
          type: integer
        documentId:
          type: string
        name:
          type: string
        building:
          $ref: '#/components/schemas/Building'
        roomType:
          $ref: '#/components/schemas/RoomType'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
      required:
        - id
        - name
        - roomType

    AirQuality:
      type: object
      required:
        - id
        - enviroScore
        - airQuality
      properties:
        id:
          type: integer
        enviroScore:
          type: integer
        airQuality:
          type: object
          required:
            - temperature
            - humidity
            - ppm
          properties:
            temperature:
              type: number
              format: float
            humidity:
              type: number
              format: float
            ppm:
              type: number
              format: float

    RoomType:
      type: object
      properties:
        id:
          type: integer
        documentId:
          type: string
        name:
          type: string
        icon:
          type: string
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
          description: Rooms with this room type
      required:
        - id
        - name
        - icon

    Device:
      type: object
      properties:
        id:
          type: integer
        documentId:
          type: string
        identifier:
          type: string
        room:
          $ref: '#/components/schemas/Room'
        deviceData:
          type: array
          items:
            $ref: '#/components/schemas/DeviceData'
      required:
        - id
        - identifier
        - room

    DeviceData:
      type: object
      properties:
        id:
          type: integer
        documentId:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        timestamp:
          type: string
          format: date-time
        airData:
          $ref: '#/components/schemas/AirData'
      required:
        - id
        - device
        - timestamp
        - airData

    AirData:
      type: object
      properties:
        temperature:
          type: number
        humidity:
          type: number
        ppm:
          type: number
      required:
        - temperature
        - humidity
        - ppm

    CreateBuildingRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address

    UpdateBuildingRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string

    AddRoomsToBuildingRequest:
      type: object
      properties:
        rooms:
          type: array
          items:
            type: string
          description: Array of room document IDs to add
      required:
        - rooms

    CreateRoomRequest:
      type: object
      properties:
        name:
          type: string
        roomTypeDocumentId:
          type: string
        buildingDocumentId:
          type: string
      required:
        - name
        - roomTypeDocumentId
        - buildingDocumentId

    UpdateRoomRequest:
      type: object
      properties:
        name:
          type: string

    AddDeviceToRoomRequest:
      type: object
      properties:
        devices:
          type: array
          items:
            type: string
          description: Array of device document IDs to add
      required:
        - devices

    CreateDeviceRequest:
      type: object
      properties:
        identifier:
          type: string
        roomDocumentId:
          type: string
      required:
        - identifier
        - roomDocumentId

    UpdateDeviceRequest:
      type: object
      properties:
        identifier:
          type: string
      required:
        - identifier

    AddDeviceDataRequest:
      type: object
      properties:
        device_data:
          type: array
          items:
            type: string
          description: Array of device data document IDs to add
      required:
        - device_data

    GetBuildingsResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          documentId:
            type: string
            example: "mockDocumentId123"
          name:
            type: string
            example: "Mock Building Name"
          address:
            type: string
            example: "123 Mock Street, Mock City"
          rooms:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 101
                documentId:
                  type: string
                  example: "mockRoomDocId456"
                name:
                  type: string
                  example: "Mock Room Name"
        required:
          - id
          - documentId
          - name
          - address
          - rooms

    GetRoomsResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          documentId:
            type: string
            example: "mockRoomDocId456"
          name:
            type: string
            example: "Mock Room Name"
          building:
            type: object
            properties:
              id:
                type: integer
                example: 77
              documentId:
                type: string
                example: "mockBuildingDocId123"
              name:
                type: string
                example: "Mock Building Name"
              address:
                type: string
                example: "123 Mock Street, Mock City"
            required:
              - id
              - documentId
              - name
              - address
          roomType:
            type: object
            properties:
              id:
                type: integer
                example: 23
              documentId:
                type: string
                example: "mockRoomTypeDocId789"
              name:
                type: string
                example: "Mock Room Type"
            required:
              - id
              - documentId
              - name
          devices:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 8
                documentId:
                  type: string
                  example: "mockDeviceDocId101"
                identifier:
                  type: string
                  example: "mockDeviceIdentifier"
              required:
                - id
                - documentId
                - identifier
            example:
              [
                {
                  "id": 1,
                  "documentId": "mockDeviceDocId101",
                  "identifier": "mockDeviceIdentifier"
                }
              ]
        required:
          - id
          - documentId
          - name
          - building
          - roomType
          - devices

    GetDevicesResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 28
          documentId:
            type: string
            example: "mockDeviceDocId789"
          identifier:
            type: string
            example: "mockDeviceIdentifier123"
          room:
            type: object
            properties:
              id:
                type: integer
                example: 17
              documentId:
                type: string
                example: "mockRoomDocId456"
              name:
                type: string
                example: "Mock Room Name"
            required:
              - id
              - documentId
              - name
          device_data:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 108
                documentId:
                  type: string
                  example: "mockDeviceDataDocId101"
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-12-16T20:57:00Z"
                temperature:
                  type: number
                  format: float
                  example: 25.5
                humidity:
                  type: number
                  format: float
                  example: 55.3
                gas_ppm:
                  type: number
                  format: float
                  example: 500
              required:
                - id
                - documentId
                - timestamp
                - temperature
                - humidity
                - gas_ppm
            example:
              [
                {
                  "id": 108,
                  "documentId": "mockDeviceDataDocId101",
                  "timestamp": "2024-12-16T20:57:00Z",
                  "temperature": 25.5,
                  "humidity": 55.3,
                  "gas_ppm": 500
                }
              ]
        required:
          - id
          - documentId
          - identifier
          - room
          - device_data

    GetDeviceDataResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 94
          documentId:
            type: string
            example: "teq4iyf0e92fk0rac6mprlgn"
          device:
            type: object
            properties:
              id:
                type: integer
                example: 8
              documentId:
                type: string
                example: "o8kj26z868vopahzgxxgmvlm"
              identifier:
                type: string
                example: "test1"
            required:
              - id
              - documentId
              - identifier
          timestamp:
            type: string
            format: date-time
            example: "2024-12-07T02:02:05.575Z"
          airData:
            type: object
            properties:
              temperature:
                type: number
                format: float
                example: 26.2
              humidity:
                type: number
                format: float
                example: 57.4
              ppm:
                type: integer
                example: 420
            required:
              - temperature
              - humidity
              - ppm
        required:
          - id
          - documentId
          - device
          - timestamp
          - airData

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter your API token as a Bearer token

security:
  - bearerAuth: []